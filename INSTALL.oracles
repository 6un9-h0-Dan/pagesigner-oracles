-------------------------------------------------------------------------------
HOW TO CREATE A TLSNOTARY ORACLE EBS SNAPSHOT.
-------------------------------------------------------------------------------
In N.Virginia region create a volume from snap-02e105f83f77cd927 (used by Ubuntu Server 18.04 LTS ami-04b9e92b5572fa0d1) in the same Availability Zone as your running instance.
Attach the volume to the running instance as e.g. /dev/sdf.

From within the instance:	
<bash>
  sudo -s
  
  git clone https://github.com/tlsnotary/pagesigner-oracles
  cd pagesigner-oracles
  mkdir /mnt/disk
  mount /dev/xvdf1 /mnt/disk
  DISK=/mnt/disk
  rm $DISK/etc/init.d/ssh
  rm $DISK/usr/sbin/sshd

  #replace root device from root=LABEL=cloudimg-rootfs to root=/dev/xvda1
  sed -i 's/root=LABEL=cloudimg-rootfs/root=\/dev\/xvda1/' $DISK/boot/grub/grub.cfg 
  #disable cloudinit modules through which user data can potentially be passed to the instance
  sed -i 's/- bootcmd//' $DISK/etc/cloud/cloud.cfg
  sed -i 's/- runcmd//' $DISK/etc/cloud/cloud.cfg
  sed -i 's/- rightscale_userdata//' $DISK/etc/cloud/cloud.cfg
  sed -i 's/- scripts-user//' $DISK/etc/cloud/cloud.cfg
  sed -i 's/- ssh//' $DISK/etc/cloud/cloud.cfg


  cp -R notary $DISK/root
  cp -R signing_server $DISK/root
  cp -R systemd $DISK/root
  
  cp systemd/tlsnotary_setup.service $DISK/etc/systemd/system/tlsnotary_setup.service
  cp systemd/tlsnotary_notaryserver.service $DISK/etc/systemd/system/tlsnotary_notaryserver.service
  cp systemd/tlsnotary_notaryserver.timer $DISK/lib/systemd/system/tlsnotary_notaryserver.timer
  cp systemd/tlsnotary_signingserver.service $DISK/etc/systemd/system/tlsnotary_signingserver.service
  
  #make services start on boot
  ln -s $DISK/etc/systemd/system/tlsnotary_setup.service $DISK/etc/systemd/system/multi-user.target.wants/tlsnotary_setup.service
  ln -s $DISK/etc/systemd/system/tlsnotary_notaryserver.service $DISK/etc/systemd/system/multi-user.target.wants/tlsnotary_notaryserver.service  
  ln -s $DISK/lib/systemd/system/tlsnotary_notaryserver.timer $DISK/etc/systemd/system/timers.target.wants/tlsnotary_notaryserver.timer 
  ln -s $DISK/etc/systemd/system/tlsnotary_signingserver.service $DISK/etc/systemd/system/multi-user.target.wants/tlsnotary_signingserver.service
  chmod +x $DISK/root/systemd/tlsnotary_setup.sh

  umount /dev/xvdf1
</bash>
		
In AWS console: 
Detach the volume,
Create a public snapshot,
Create an Image from the snapshot, making sure that:
Virtualization type is Hardware-assisted virtualization
Root device name is /dev/xvda
Note the AMI ID and make the AMI public.


-------------------------------------------------------------------------------
HOW TO LAUNCH AN ORACLE INSTANCE FROM THE PUBLIC SNAPSHOT.
-------------------------------------------------------------------------------
Launch the AMI you created from AWS management console. Choose "Proceed without a key pair".

Make sure that:
  Instance's "launchTime" and volume's "attachTime" happened on the same minute with no more than 2 seconds between the events.
  Console Output (right-click an instance ->Instance Settings -> Get System Log) is available (after ~5 mins), since it was observed that sometimes an instance may not have any.
  In Console Output there are no spurious lines between -----BEGIN PUBLIC KEY----- and -----END PUBLIC KEY-----.
 
Modify the security group to allow only inbound traffic on TCP port 10011. Disallow any outbound traffic.

-------------------------------------------------------------------------------
HOW CAN YOU PROVE TO THE WORLD THAT A CERTAIN IP ADDRESS IS RUNNING THE ORACLE INSTANCE
-------------------------------------------------------------------------------
Use aws_query.py to create and publish URLs for requests 
DescribeInstances
DescribeInstanceAttribute (userData, kernel, ramdisk)
DescribeVolumes
GetUser
GetConsoleOutput
DescribeImages

-------------------------------------------------------------------------------
FOR VERIFIERS: HOW TO CHECK THAT THE SNAPSHOT CONTENTS WAS NOT MALICIOUSLY MODIFIED.
-------------------------------------------------------------------------------
Repeat all the steps described in "HOW TO CREATE AN ORACLE EBS SNAPSHOT" but don't create a public snapshot.
Attach the resulting volume (volX) to a running instance as /dev/sdg
Create a volume from the snapshot (volY) you are verifying and attach it to /dev/sdh
After that, run from within the instance
<bash>
  sudo -s
  fsck /dev/xvdg1
  fsck /dev/xvdh1
  #fsck must show that there were no errors
  mkdir /mnt/disk1
  mkdir /mnt/disk2
  mount /dev/xvdg1 /mnt/disk1
  mount /dev/xvdh1 /mnt/disk2
</bash>
 
Compare the hashes of volX and volY. 
First hash file/directory/symlink paths, ownership, permissions, and symlink targets.
Then hash the contents of all regular files.
The outputs must match.

Also make sure that MBR and boot sector raw disk data match up to the point where filesystem starts.
Note: we do not check ext4 filesystem headers because they are not deterministic.
fdisk -l /dev/xvdg should show you that you only have 1 partition which starts at sector 2048

<bash>
  cd /mnt/disk1
  find . -printf '%h %f %U %G %m %l\n' | sort -t \n | sha256sum
  find . -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum
  dd if=/dev/xvdg ibs=512 count=2048 | sha256sum

  cd /mnt/disk2
  find . -printf '%h %f %U %G %m %l\n' | sort -t \n | sha256sum
  find . -type f -print0 | sort -z | xargs -0 sha256sum | sha256sum
  dd if=/dev/xvdh ibs=512 count=2048 | sha256sum
</bash>


-------------------------------------------------------------------------------
FOR VERIFIERS: HOW TO DETERMINE THAT THE RUNNING ORACLE INSTANCE IS LEGIT
-------------------------------------------------------------------------------
The published URLs must conform to the checks performed in functions starting with check* in content/oracles.js.


-------------------------------------------------------------------------------
POSSIBLE ATTACKS AND HOW THEY WILL BE MITIGATED
-------------------------------------------------------------------------------
(or in other words, what prevents the AWS account owner from modifying the oracle instance code)


    Attack1.
Launch the AMI with a rogue snapshot on /dev/xvda
    Mitigation:
AWS doesn't allow replacing the snapshotID on the root device.
    Testing:
  ec2-run-instances -O id -W key ami-12345678 -b /dev/xvda=snap-12345678:::: -t t2.micro
    Returns:
Client.InvalidBlockDeviceMapping: snapshotId cannot be modified on root device


    Attack2.
Launch the AMI with a rogue snapshot on /dev/xvdb hoping that the AMI will boot it instead of /dev/xvda
    Mitgation:
In grub.cfg we changed to root=/dev/xvda1.
    Testing:
ec2-run-instances -O id -W key ami-12345678 -b /dev/xvdb=snap-12345678:::: -t t2.micro
After a few minuted check in the System Log that xvda volume was booted.


    Attack3.
Launch the AMI with /dev/xvda=none and a rogue snapshot on /dev/xvdb. After that the AMI in the absence of xvda will boot xvdb.
Attach the oracle snapshot as xvda and modify it. Then reboot and detach xvdb.
Upon reboot the modified xvda will be chosen by the kernel as the root device.
    Mitigation:
AWS will not allow attaching a volume to /dev/xvda. Even if it did, the attachment time of xvda would differ from the time when AMI was launched.
    Testing:
ec2-run-instances -O id -W key ami-12345678 -b /dev/xvda=none -b /dev/xvdb=snap-12345678:::: -t t2.micro
ec2-attach-volume -O id -W key vol-1234567 -i i-12345678 -d /dev/xvda
    Returns:
Client.InvalidParameterValue: Invalid value '/dev/xvda' for unixDevice. Attachment point /dev/xvda is already in use


    Attack4.
Launch AMI with user data passed in.
    Mitigation:
AWS doesn't allow to modify user data while the instance is running, so DescribeInstanceAttribute userData API call will reveal that data was passed in at launch.
On top of that, we removed the bootcmd module from AMI's cloud-init. This module is responsible for handling the user Data.
    Testing:
    //FIXME --user-data doesnt work, instead use Management Console to launch the instance and pass user data
    Run stock AMI with user data passed in
ec2-run-instances -O id -W key ami-fce3c696 -t t2.nano --user-data '!#/bin/bash echo "HELLO FROM USER DATA"'
    Open Instance's System Log and ascertain that the string is visible.
    
    Run oracle AMI with user data passed in
ec2-run-instances -O id -W key ami-15192302 -t t2.nano --user-data '!#/bin/bash echo "HELLO FROM USER DATA"'
    The user data MUST NOT be visible in System Log.
